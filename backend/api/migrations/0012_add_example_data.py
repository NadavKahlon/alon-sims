# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.db import migrations

# Colors from migration 0009
TOPIC_TYPE_COLORS = {
    "אנשים": "#e53935",       # red
    "סיטואציות": "#8e24aa",   # purple
    "פקודות": "#1e88e5",      # blue
    "תכונות נבחנות": "#43a047", # green
}


ROLE_TAGS = [
    "חבצלות",
    "אפסילון",
    "בינה",
    "ברקים",
    "גבישים",
    "חבצלות",
    "סילון",
    "צמרת",
    "תלפיות",
    "עתודאי רגיל",
    "אקדמיזציה",
    "רפואה",
    "רפואת שיניים",
    "טכנולוגיה",
    "סייבר",
    'גאמ"א',
    "ניהול מוצר",
    "תכנות",
    "הנדסה",
]
SIMULATION_TOPICS = {
    "אנשים": [
        "התנהלות עם רמה ממונה",
        "התנהלות עם פקודים",
        "התנהלות עם עמיתים",
        "התנהלות עם חיילים אחרים",
        "התנהלות עם הורים של פקוד",
    ],
    "פקודות": [
        "השירות המשותף",
        'ב"מ',
        'צ"ש',
        'ברה"ן',
        "עבירות פליליות",
        "זכויות החייל",
        "רפואה",
        "פוליטיקה",
    ],
    "תכונות נבחנות": [
        "מקצועיות",
        "אסרטיביות",
        "חוסן",
        "רגישות",
        "אחריות",
        "קור רוח",
        "סבלנות",
        "בטחון עצמי",
        "כושר ביטוי",
        "סמכותיות",
        "קבלת החלטות",
        "רתימת עמיתים",
        "תפקוד תחת לחץ",
        'התמודדות עם בלת"מים',
        "מערכתיות",
        "אכפתיות",
        "קבלת ביקורת",
    ],
    "סיטואציות": [
        "סירוב פקודה",
        "ראיון",
        "אמינות הפקוד",
        "זלזול הפקוד",
        "מרחק פיקודי",
        "אכזבת פקוד",
        "שקיפות עם פקוד",
        "עירור מוטיבציה",
        "פיתוח פקודים",
        "אנשים מול משימה",
        "התמודדות עם נזיפה",
        "ניהול שיחה קשה",
        'שבירת היררכיית הפו"ש',
        "עבודה מול חברים",
        "ניהול מחלוקות",
        "לקיחת אחריות",
        "החייל במרחב הציבורי",
        "מתן ביקורת",
        "יציאת חייל לקצונה",
    ],
}

SIMULATIONS = [
    {
        "author": "רס\"ן יוסי כהן",
        "url": "https://example.com/sim1",
        "week_topic": "מנהיגות",
        "type": "פורמלית",
        "difficulty": "בינונית",
        "role": "חבצלות",
        "simulation_topics": ["התנהלות עם פקודים", "מנהיגות", "קבלת החלטות"]
    },
    {
        "author": "רס\"ן שרה לוי",
        "url": "https://example.com/sim2",
        "week_topic": "יסודות",
        "type": "מתפרצת",
        "difficulty": "קשה",
        "role": "אפסילון",
        "simulation_topics": ["תכנון מבצעי", "פיקוד על שטח", "תיאום מבצעים"]
    },
    {
        "author": "רס\"ן דוד ישראלי",
        "url": "https://example.com/sim3",
        "week_topic": "שבוע שטח",
        "type": "פורמלית",
        "difficulty": "קלה",
        "role": "בינה",
        "simulation_topics": ["התנהלות עם רמה ממונה", "מקצועיות", "אחריות"]
    },
    {
        "author": "רס\"ר מיכל אברהם",
        "url": "https://example.com/sim4",
        "week_topic": 'סד"ח',
        "type": "מתפרצת",
        "difficulty": "בינונית",
        "role": "ברקים",
        "simulation_topics": ["ניהול שיחה קשה", "אסרטיביות", "קור רוח"]
    },
    {
        "author": "רס\"ן אורי גולד",
        "url": "https://example.com/sim5",
        "week_topic": "המקצוע הצבאי",
        "type": "פורמלית",
        "difficulty": "קשה",
        "role": "גבישים",
        "simulation_topics": ["פיתוח פקודים", "מערכתיות", "אכפתיות"]
    }
]


def seed_data(apps, schema_editor):
    WeekTopic = apps.get_model("api", "WeekTopic")
    RoleTag = apps.get_model("api", "RoleTag")
    SimulationTopicType = apps.get_model("api", "SimulationTopicType")
    SimulationTopic = apps.get_model("api", "SimulationTopic")
    Simulation = apps.get_model("api", "Simulation")

    # Seed RoleTag
    for name in ROLE_TAGS:
        RoleTag.objects.get_or_create(name=name)

    # Seed SimulationTopicType and SimulationTopic
    for topic_type_name in SIMULATION_TOPICS:
        topic_type, _ = SimulationTopicType.objects.get_or_create(
            name=topic_type_name,
            defaults={"color": TOPIC_TYPE_COLORS.get(topic_type_name, "#9e9e9e"), "serial_num": 0}
        )
        for topic in SIMULATION_TOPICS[topic_type_name]:
            SimulationTopic.objects.get_or_create(
                name=topic,
                defaults={"type": topic_type}
            )

    # Seed Simulations
    for sim_data in SIMULATIONS:
        week_topic = WeekTopic.objects.get(topic=sim_data["week_topic"])
        role = RoleTag.objects.get(name=sim_data["role"]) if sim_data["role"] else None
        
        simulation = Simulation.objects.create(
            author=sim_data["author"],
            url=sim_data["url"],
            week_topic=week_topic,
            type=sim_data["type"],
            difficulty=sim_data["difficulty"],
            role=role
        )
        
        # Add simulation topics
        simulation_topics = SimulationTopic.objects.filter(
            name__in=sim_data["simulation_topics"]
        )
        simulation.simulation_topics.set(simulation_topics)


def unseed_data(apps, schema_editor):
    Simulation = apps.get_model("api", "Simulation")
    WeekTopic = apps.get_model("api", "WeekTopic")
    RoleTag = apps.get_model("api", "RoleTag")
    SimulationTopic = apps.get_model("api", "SimulationTopic")
    SimulationTopicType = apps.get_model("api", "SimulationTopicType")

    # Delete simulations first (due to foreign key constraints)
    Simulation.objects.all().delete()
    
    # Delete simulation topics
    for topics in SIMULATION_TOPICS.values():
        if topics:
            SimulationTopic.objects.filter(name__in=topics).delete()
    
    # Delete topic types
    SimulationTopicType.objects.filter(name__in=list(SIMULATION_TOPICS.keys())).delete()
    
    # Delete role tags
    if ROLE_TAGS:
        RoleTag.objects.filter(name__in=ROLE_TAGS).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0011_remove_simulationtopictype_api_simtype_serial_idx_and_more"),
    ]

    operations = [
        migrations.RunPython(seed_data, reverse_code=unseed_data),
    ]
