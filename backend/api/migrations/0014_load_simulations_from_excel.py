# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.db import migrations
import pandas as pd
import os


def load_simulations_from_excel(apps, schema_editor):
    """Load simulations from the Excel file and replace all existing simulations."""
    
    # Get models
    Simulation = apps.get_model("api", "Simulation")
    WeekTopic = apps.get_model("api", "WeekTopic")
    RoleTag = apps.get_model("api", "RoleTag")
    SimulationTopic = apps.get_model("api", "SimulationTopic")
    
    # Clear all existing simulations
    Simulation.objects.all().delete()
    
    # Read Excel file
    excel_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), '..', 'knowledge-base.xlsx')
    if not os.path.exists(excel_path):
        excel_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '..', 'knowledge-base.xlsx')
    
    try:
        df = pd.read_excel(excel_path)
    except Exception as e:
        print(f"Error reading Excel file: {e}")
        return
    
    # Process each row
    for index, row in df.iterrows():
        # Skip empty rows
        if row.isnull().all():
            continue
            
        # Extract data from Excel row
        author = str(row[' מחבר']) if pd.notna(row[' מחבר']) else "מחבר לא ידוע"
        week_num = str(row['שבוע']) if pd.notna(row['שבוע']) else "1"
        sim_type_raw = str(row[' סוג']) if pd.notna(row[' סוג']) else "פורמלית"
        
        # Clean simulation type (handle space in " מתפרצת")
        sim_type = sim_type_raw.strip()
        
        # Translate difficulty from Excel format to database format
        difficulty_raw = str(row['רמת קושי']) if pd.notna(row['רמת קושי']) else "בינונית"
        difficulty_mapping = {
            "קל": "קלה",
            "בינוני": "בינונית", 
            "קשה": "קשה"
        }
        difficulty = difficulty_mapping.get(difficulty_raw, difficulty_raw)
        
        role_name = str(row['מסלול / תפקיד מיועד']) if pd.notna(row['מסלול / תפקיד מיועד']) else None
        topics_str = str(row['נקודות לדקירה (בחרו כמה, עובד במחשב)']) if pd.notna(row['נקודות לדקירה (בחרו כמה, עובד במחשב)']) else ""
        url = str(row['קישור (וודאו שהמסמך נגיש לכל מי שיש לו את הקישור!)']) if pd.notna(row['קישור (וודאו שהמסמך נגיש לכל מי שיש לו את הקישור!)']) else "https://example.com/placeholder"
        title = str(row['כותרת הסימולציה (משפט שמתאר בקצרה את האירוע, ישמש כדי להציג את הסימולציה בתוצאה של החיפוש) ממליץ להשתמש בAI כדי לייצר את הכותרת כתימצות של הא"ת / סיכום הסימולציה (העמודה הבאה)']) if pd.notna(row['כותרת הסימולציה (משפט שמתאר בקצרה את האירוע, ישמש כדי להציג את הסימולציה בתוצאה של החיפוש) ממליץ להשתמש בAI כדי לייצר את הכותרת כתימצות של הא"ת / סיכום הסימולציה (העמודה הבאה)']) else ""
        summary = str(row['סיכום הסימולציה (זה ההסבר היחיד המעמיק שיופיע בשימור ידע בפועל - תכתבו פסקה יחסית מפורטת!) ממליץ להעתיק מסעיף "מהלך הסימולציה" בא"ת']) if pd.notna(row['סיכום הסימולציה (זה ההסבר היחיד המעמיק שיופיע בשימור ידע בפועל - תכתבו פסקה יחסית מפורטת!) ממליץ להעתיק מסעיף "מהלך הסימולציה" בא"ת']) else ""
        
        # Skip if essential data is missing
        if not title and not summary:
            continue
            
        # Map week numbers to proper week names
        week_mapping = {
            "1": "יסודות",
            "2": "מנהיגות", 
            "3": "שבוע שטח",
            "4": "סד״ח",
            "5": "המקצוע הצבאי",
            "6": "המקצוע הצבאי",
            "7": "פיקוד וטיפול בפרט",
            "8": "זהות",
            "9": "סיכום"
        }
        
        # Handle date format in week column (e.g., "2025-06-05 00:00:00" -> "המקצוע הצבאי")
        if "2025-06-05" in str(week_num):
            week_topic_name = "המקצוע הצבאי"
        else:
            week_topic_name = week_mapping.get(week_num, f"שבוע {week_num}")
        week_topic, _ = WeekTopic.objects.get_or_create(
            topic=week_topic_name,
            defaults={"serial_num": int(week_num) if week_num.isdigit() else 1}
        )
        
        # Get or create role tag
        role = None
        if role_name and role_name.strip():
            role, _ = RoleTag.objects.get_or_create(name=role_name.strip())
        
        # Create simulation
        simulation = Simulation.objects.create(
            title=title,
            summary=summary,
            author=author,
            url=url,
            week_topic=week_topic,
            type=sim_type,
            difficulty=difficulty,
            role=role
        )
        
        # Add simulation topics
        if topics_str and topics_str.strip():
            # Split topics by comma and clean them
            topic_names = [topic.strip() for topic in topics_str.split(',') if topic.strip()]
            for topic_name in topic_names:
                # Fix quote issues: "ב""מ" -> ב"מ, "התמודדות עם בלת""מים" -> התמודדות עם בלת"מים
                cleaned_topic_name = topic_name
                if topic_name.startswith('"') and topic_name.endswith('"'):
                    # Remove outer quotes and fix inner quotes
                    cleaned_topic_name = topic_name[1:-1].replace('""', '"')
                
                # Try to find existing topic or create new one
                topic, _ = SimulationTopic.objects.get_or_create(
                    name=cleaned_topic_name,
                    defaults={"type": None}
                )
                simulation.simulation_topics.add(topic)


def clear_all_simulations(apps, schema_editor):
    """Clear all simulations (reverse operation)."""
    Simulation = apps.get_model("api", "Simulation")
    Simulation.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0013_add_title_summary_and_seed"),
    ]

    operations = [
        migrations.RunPython(load_simulations_from_excel, reverse_code=clear_all_simulations),
    ]
