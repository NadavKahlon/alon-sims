# Generated by Django 4.2.7 on 2024-01-01 00:00

from django.db import migrations
import pandas as pd
import os


def load_cleaned_simulations(apps, schema_editor):
    """Load simulations from the cleaned Excel file and replace all existing simulations."""
    
    # Get models
    Simulation = apps.get_model("api", "Simulation")
    WeekTopic = apps.get_model("api", "WeekTopic")
    RoleTag = apps.get_model("api", "RoleTag")
    SimulationTopic = apps.get_model("api", "SimulationTopic")
    
    # Clear all existing simulations
    Simulation.objects.all().delete()
    
    # Read cleaned Excel file
    excel_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), '..', 'knowledge-base.xlsx')
    try:
        df = pd.read_excel(excel_path)
        print(f"Loading {len(df)} simulations from cleaned Excel file")
    except Exception as e:
        print(f"Error reading cleaned Excel file: {e}")
        return
    
    # Process each row
    for index, row in df.iterrows():
        # Skip empty rows
        if row.isnull().all():
            continue
        
        # Extract data from cleaned Excel row
        title = str(row['title']) if pd.notna(row['title']) else ""
        summary = str(row['summary']) if pd.notna(row['summary']) else ""
        week_topic_name = str(row['week_topic']) if pd.notna(row['week_topic']) else "יסודות"
        sim_type = str(row['type']) if pd.notna(row['type']) else "פורמלית"
        difficulty = str(row['difficulty']) if pd.notna(row['difficulty']) else "בינונית"
        role = str(row['role']) if pd.notna(row['role']) else ""
        topics_str = str(row['simulation_topics']) if pd.notna(row['simulation_topics']) else ""
        
        # Skip if essential data is missing
        if not title and not summary:
            continue
        
        # Get or create week topic
        week_topic, _ = WeekTopic.objects.get_or_create(
            topic=week_topic_name,
            defaults={"serial_num": 1}
        )
        
        # Get or create role tag
        if role and role.strip():
            role, _ = RoleTag.objects.get_or_create(name=role.strip())
        
        # Create simulation
        simulation = Simulation.objects.create(
            title=title,
            summary=summary,
            week_topic=week_topic,
            type=sim_type,
            difficulty=difficulty,
            role=role
        )
        
        # Add simulation topics
        if topics_str and topics_str.strip():
            # Split topics by comma and clean them
            topic_names = [topic.strip() for topic in topics_str.split(',') if topic.strip()]
            for topic_name in topic_names:
                # Try to find existing topic or create new one
                topic, _ = SimulationTopic.objects.get_or_create(
                    name=topic_name,
                    defaults={"type": None}
                )
                simulation.simulation_topics.add(topic)
    
    print(f"Successfully loaded {Simulation.objects.count()} simulations")


def clear_all_simulations(apps, schema_editor):
    """Clear all simulations (reverse operation)."""
    Simulation = apps.get_model("api", "Simulation")
    Simulation.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ("api", "0013_add_title_summary_and_seed"),
    ]

    operations = [
        migrations.RunPython(load_cleaned_simulations, reverse_code=clear_all_simulations),
    ]
